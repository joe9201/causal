import sys
from data_preparation import load_and_prepare_student_data, load_and_prepare_adult_data
from pc_algorithm import run_pc_algorithm
from fci_algorithm import run_fci_algorithm
from ges_algorithm import run_ges_algorithm
from lingam_algorithm import run_lingam_algorithm
from true_graph import create_true_graph_student, plot_true_graph
from evaluation import evaluate_graph
from plotting_utils import plot_and_save_graph

def run_algorithms_for_dataset(data_preparation_func, true_graph_func, file_path):
    df_encoded, labels, data = data_preparation_func(file_path)
    graphs = {}  # Dictionary to store the graphs generated by each algorithm

    # Run Algorithms
    algorithms = {
        "PC": run_pc_algorithm,
        "FCI": run_fci_algorithm,
        "GES": run_ges_algorithm,
        "LiNGAM": run_lingam_algorithm
    }

    for algo_name, algo_func in algorithms.items():
        print(f"\nRunning {algo_name} algorithm...")
        try:
            graph = algo_func(data, labels)
            if graph is not None:  # Check if graph creation was successful
                graphs[algo_name] = graph
                plot_and_save_graph(graph, labels, f'{algo_name}_graph.png')
        except Exception as e:
            print(f"Error running {algo_name} algorithm: {e}")
        input("Press Enter to continue...")  # Pause until Enter is pressed

    if true_graph_func:
        G_true = true_graph_func()
        plot_true_graph(G_true, dataset_arg)  # Plot the true graph once

        # Evaluate Graphs
        for algo_name, graph in graphs.items():
            if graph is not None:
                shd, recall, precision = evaluate_graph(graph, G_true)
                print(f"{algo_name} Algorithm - SHD: {shd}, Recall: {recall}, Precision: {precision}")
    else:
        print("True graph function not available for this dataset.")

if __name__ == "__main__":
    dataset_arg = sys.argv[1] if len(sys.argv) > 1 else 'student'
  
    datasets = {
        'student': {
            "file_path": 'data/student-por_raw.csv',
            "data_preparation_func": load_and_prepare_student_data,
            "true_graph_func": create_true_graph_student
        },
        'adult': {
            "file_path": 'data/adult.csv',
            "data_preparation_func": load_and_prepare_adult_data,
            "true_graph_func": None  # No true graph function for adult yet
        }
    }

    # Get the configuration for the selected dataset
    dataset_config = datasets.get(dataset_arg)
    if dataset_config:
        run_algorithms_for_dataset(
            dataset_config["data_preparation_func"],
            dataset_config["true_graph_func"],
            dataset_config["file_path"]
        ) 

    else:
        print(f"Invalid dataset argument: {dataset_arg}")